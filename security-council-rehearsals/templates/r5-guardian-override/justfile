set dotenv-load

export rpcUrl := env_var_or_default('ETH_RPC_URL', "https://ethereum.publicnode.com")
export signatures := env_var_or_default('SIGNATURES', '')
export councilSafe := env_var('COUNCIL_SAFE')
export bundle := "input"
export location := `pwd`
export randomPersonEoa := "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
export dummyDgm := env_var('DUMMY_DEPUTY_GUARDIAN_MODULE')
export guardianSafe := env_var('GuardianSafe_ADDRESS')
export superchainConfig := env_var('SuperchainConfig_ADDRESS')

simulate-council hdPath='0':
  #!/usr/bin/env bash
  cd ../..
  echo "getting signer address..."
  if [ t"$SIMULATE_WITHOUT_LEDGER" == t1 ]
  then
    signer="0xc49d46E3F834f5C9856A7FcBEB185baD052c98e7"
  else
    signer=$(cast wallet address --ledger --mnemonic-derivation-path "m/44'/60'/{{hdPath}}'/0/0")
  fi
  echo "Simulating with: ${signer}"
  echo ""
  forge build
  forge script NestedSignFromJson \
    --rpc-url ${rpcUrl} \
    --sender ${signer} \
    --sig "signJson(string,address)" \
    "${location}/${bundle}.json" \
    "${councilSafe}"

sign-council hdPath='0':
  #!/usr/bin/env bash
  cd ../..
  echo "getting signer address..."
  signer=$(cast wallet address --ledger --mnemonic-derivation-path "m/44'/60'/{{hdPath}}'/0/0")
  echo "Signing with: ${signer}"
  echo ""
  forge build
  $(git rev-parse --show-toplevel)/bin/eip712sign --ledger --hd-paths "m/44'/60'/{{hdPath}}'/0/0" -- \
  forge script NestedSignFromJson \
    --rpc-url ${rpcUrl} \
    --sig "signJson(string,address)" \
    "${location}/${bundle}.json" \
    "${councilSafe}"

approve-council hdPath='0':
  #!/usr/bin/env bash
  cd ../..
  sender=$(cast wallet address --ledger --mnemonic-derivation-path "m/44'/60'/{{hdPath}}'/0/0")
  forge build
  forge script NestedSignFromJson \
    --fork-url ${rpcUrl} \
    --ledger --hd-paths "m/44'/60'/{{hdPath}}'/0/0" \
    --broadcast \
    --sender ${sender} \
    --sig "approveJson(string,address,bytes)" \
    ${location}/${bundle}.json \
    "${councilSafe}" \
    ${signatures}

execute-all hdPath='0':
  #!/usr/bin/env bash
  cd ../..
  sender=$(cast wallet address --ledger --mnemonic-derivation-path "m/44'/60'/{{hdPath}}'/0/0")
  forge build
  forge script NestedSignFromJson \
    --fork-url ${rpcUrl} \
    --ledger --hd-paths "m/44'/60'/{{hdPath}}'/0/0" \
    --broadcast \
    --sender ${sender} \
    --sig "runJson(string)" \
    ${location}/${bundle}.json

deploy-contracts hdPath='0':
  #!/usr/bin/env bash
  cd ../..
  sender=$(cast wallet address --ledger --mnemonic-derivation-path "m/44'/60'/{{hdPath}}'/0/0")
  forge build
  forge script DeployRehearsal5 --ffi \
    --fork-url ${rpcUrl} \
    --ledger --hd-paths "m/44'/60'/{{hdPath}}'/0/0" \
    --broadcast \
    --sender ${sender} \
    --verify --etherscan-api-key {{env_var('ETHERSCAN_KEY')}}

prepare-json:
  #!/usr/bin/env bash
  sentinel_module=0x0000000000000000000000000000000000000001
  calldata_0=$(cast calldata "disableModule(address,address)" ${sentinel_module} ${dummyDgm})
  jq ".transactions[0].to |= \"${guardianSafe}\"" ./input.json > ./input.tmp && mv input.tmp input.json
  jq ".transactions[0].data |= \"${calldata_0}\"" ./input.json > ./input.tmp && mv input.tmp input.json


  # prevalidated signature
  signatures="${councilSafe}"000000000000000000000000000000000000000000000000000000000000000001
  a0=0x0000000000000000000000000000000000000000
  calldata_from_guardian=$(cast calldata "unpause()")
  calldata_from_security_council=$(cast calldata "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)" \
    ${superchainConfig} \
    0 \
    ${calldata_from_guardian} \
    0 \
    0 \
    0 \
    0 \
    0x0000000000000000000000000000000000000000 \
    0x0000000000000000000000000000000000000000 \
    ${signatures}
  )
  jq ".transactions[1].to |= \"${guardianSafe}\"" ./input.json > ./input.tmp && mv input.tmp input.json
  jq ".transactions[1].data |= \"${calldata_from_security_council}\"" ./input.json > ./input.tmp && mv input.tmp input.json
